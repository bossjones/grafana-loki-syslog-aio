#############################################################################
# Default syslog-ng.conf file which collects all local logs into a
# single file called /var/log/messages tailored to container usage.
#
# The changes from the stock, default syslog-ng.conf file is that we've
# dropped the system() source that is not needed and that we enabled network
# connections using default-network-drivers(). Customize as needed and
# override using the -v option to docker, such as:
#
#  docker run ...  -v "$PWD/syslog-ng.conf":/etc/syslog-ng/syslog-ng.conf
#

@version: 3.29
@include "scl.conf"

##############################################################################################
# SOURCE: https://github.com/abalage/balagetech-openwrt-syslog-ng-elasticsearch/blob/master/syslog-ng/etc/syslog-ng/syslog-ng.conf

#
# /etc/syslog-ng/syslog-ng.conf
#
# File format description can be found in syslog-ng.conf(5)
# and in /usr/share/doc/packages/syslog-ng/syslog-ng.txt.
#
# NOTE: The SuSEconfig script and its syslog-ng.conf.in
#       configuration template aren't used any more.
#
#       Feel free to edit this file directly.
#

# (chain_hostnames): Description: Enable or disable the chained hostname format. If a client sends the log message directly to the syslog-ng OSE server, the chain-hostnames() option is enabled on the server, and the client sends a hostname in the message that is different from its DNS hostname (as resolved from DNS by the syslog-ng OSE server), then the server can append the resolved hostname to the hostname in the message (separated with a / character) when the message is written to the destination.
# For example, consider a client-server scenario with the following hostnames: client-hostname-from-the-message, client-hostname-resolved-on-the-server, server-hostname. The hostname of the log message written to the destination depends on the keep-hostname() and the chain-hostnames() options. How keep-hostname() and chain-hostnames() options are related is described in the following table.

# (flush_lines): Description: Specifies how many lines are flushed to a destination at a time. The syslog-ng OSE application waits for this number of lines to accumulate and sends them off in a single batch. Increasing this number increases throughput as more messages are sent in a single batch, but also increases message latency.
# The syslog-ng OSE application flushes the messages if it has sent flush-lines() number of messages, or the queue became empty. If you stop or reload syslog-ng OSE or in case of network sources, the connection with the client is closed, syslog-ng OSE automatically sends the unsent messages to the destination.
# For optimal performance when sending messages to an syslog-ng OSE server, make sure that the flush-lines() is smaller than the window size set using the log-iw-size() option in the source of your server.

# (perm): Description: The permission mask of the file if it is created by syslog-ng. For octal numbers prefix the number with 0, for example use 0755 for rwxr-xr-x.
# To preserve the original properties of an existing file, use the option without specifying an attribute: perm().

# (stats_freq): Description: The period between two STATS messages in seconds. STATS are log messages sent by syslog-ng, containing statistics about dropped log messages. Set to 0 to disable the STATS messages.

# ts-format: Type:	rfc3164, bsd, rfc3339, iso
# Default:	rfc3164
# Description: Override the global timestamp format (set in the global ts-format() parameter) for the specific destination. For details, see ts-format().

#
# Global options.
#
# options { chain_hostnames(off); flush_lines(0); perm(0640); stats_freq(3600); threaded(yes); ts-format(iso); };
options { threaded(yes); };

#
# Filter definitions
#
filter f_iptables   { facility(kern) and message("IN=") and message("OUT="); };

filter f_console    { level(warn) and facility(kern) and not filter(f_iptables)
                    or level(err) and not facility(authpriv); };

filter f_newsnotice { level(notice) and facility(news); };
filter f_newscrit   { level(crit)   and facility(news); };
filter f_newserr    { level(err)    and facility(news); };
filter f_news       { facility(news); };

filter f_mailinfo   { level(info)      and facility(mail); };
filter f_mailwarn   { level(warn)      and facility(mail); };
filter f_mailerr    { level(err, crit) and facility(mail); };
filter f_mail       { facility(mail); };

filter f_cron       { facility(cron); };

filter f_local      { facility(local0, local1, local2, local3,
                            local4, local5, local6, local7); };

#
# acpid messages
#
filter f_acpid_full { program('acpid'); };
filter f_acpid      { level(emerg..notice) and program('acpid'); };

# this is for the old acpid < 1.0.6
filter f_acpid_old  { program('^\[acpid\]$'); };

filter f_netmgm     { program('NetworkManager') or program('nm-dispatcher'); };

# filter f_messages   { not facility(news, mail) and not filter(f_iptables) and not filter(f_ulogd) and not filter(f_unbound); };
filter f_messages   { not facility(news, mail) and not filter(f_iptables); };
filter f_warn       { level(warn, err, crit) and not filter(f_iptables); };
filter f_alert      { level(alert); };


# #
# # News-messages in separate files:
# #
# destination newscrit   { file("/var/log/news/news.crit"
#                               suppress(30) owner(news) group(news)); };
# log { source(src); source(chroots); filter(f_newscrit); destination(newscrit); };

# destination newserr    { file("/var/log/news/news.err"
#                               suppress(30) owner(news) group(news)); };
# log { source(src); source(chroots); filter(f_newserr); destination(newserr); };

# destination newsnotice { file("/var/log/news/news.notice"
#                               suppress(30) owner(news) group(news)); };
# log { source(src); source(chroots); filter(f_newsnotice); destination(newsnotice); };

##############################################################################################




# SOURCE: https://serverfault.com/questions/773040/syslog-ng-doesnt-parse-messages
template remote_message {
    template("${R_ISODATE} s=${SDATA} mesg=${MSGONLY}\n");
};

# source src {
# 	#
# 	# use system() for local logs
# 	#
# 	system();
# 	#
# 	# syslog-ng's internal messages
# 	#
# 	internal();
# 	#
# 	# uncomment to process log messages from network:
# 	#
# 	#udp(ip("0.0.0.0") port(514));
# };


# source: Read, receive, and collect log messages
# https://www.syslog-ng.com/technical-documents/doc/syslog-ng-open-source-edition/3.30/administration-guide/16#TOPIC-956446
# A source is where syslog-ng receives log messages. Sources consist of one or more drivers, each defining where and how messages are received.
# internal(): Messages generated by syslog-ng.
# network(transport("udp")): Messages arriving to the 514/UDP port of any interface of the host.
# unix-dgram("/dev/log");: Messages arriving to the /dev/log socket.
# source s_demo {
#     internal();
#     network(transport("udp"));
#     unix-dgram("/dev/log");
# };
source s_local {
	#
	# syslog-ng's internal messages
	#
	internal();
};

# The default-network-drivers() source is a special source that uses multiple source drivers to receive and parse several different types of syslog messages from the network. Available in version 3.16 and later.
# Also, make sure that your SELinux, AppArmor, and firewall settings permit syslog-ng Open Source Edition to access the ports where you want to receive messages, and that no other application is using these ports. By default, the default-network-drivers() source accepts messages on the following ports:

# 514, both TCP and UDP, for RFC3164 (BSD-syslog) formatted traffic

# 601 TCP, for RFC5424 (IETF-syslog) formatted traffic

# 6514 TCP, for TLS-encrypted traffic
# https://www.syslog-ng.com/technical-documents/doc/syslog-ng-open-source-edition/3.30/administration-guide/18#TOPIC-1594914
source s_network {
	default-network-drivers(
		# NOTE: TLS support
		#
		# the default-network-drivers() source driver opens the TLS
		# enabled ports as well, however without an actual key/cert
		# pair they will not operate and syslog-ng would display a
		# warning at startup.
		#
		#tls(key-file("/path/to/ssl-private-key") cert-file("/path/to/ssl-cert"))
	);
};

destination d_loki {
	syslog("promtail" transport("tcp") port("1514"));
};

# Parser - p_iptables_parser
parser p_iptables_parser {
    iptables-parser(
    );
};

# # SOURCE: https://serverfault.com/questions/773040/syslog-ng-doesnt-parse-messages
# destination d_remote {
#     file(
#         "/var/log/remote.log"
#         owner(root)
#         group(root)
#         create_dirs(yes)
#         template(remote_message)
#     );
# };


log {
        source(s_local);
        source(s_network);
        # parser(p_iptables_parser);
        destination(d_loki);
        # destination(d_remote);
};


# #
# # News-messages in separate files:
# #
# destination newscrit   { file("/var/log/news/news.crit"
#                               suppress(30) owner(news) group(news)); };
# log { source(src); source(chroots); filter(f_newscrit); destination(newscrit); };

# destination newserr    { file("/var/log/news/news.err"
#                               suppress(30) owner(news) group(news)); };
# log { source(src); source(chroots); filter(f_newserr); destination(newserr); };

# destination newsnotice { file("/var/log/news/news.notice"
#                               suppress(30) owner(news) group(news)); };
# log { source(src); source(chroots); filter(f_newsnotice); destination(newsnotice); };

# #
# # and optionally also all in one file:
# # (don't forget to provide logrotation config)
# #
# #destination news { file("/var/log/news.all"); };
# #log { source(src); source(chroots); filter(f_news); destination(news); };


# #
# # Mail-messages in separate files:
# #
# destination mailinfo { file("/var/log/mail.info" suppress(30)); };
# log { source(src); source(chroots); filter(f_mailinfo); destination(mailinfo); };

# destination mailwarn { file("/var/log/mail.warn" suppress(30)); };
# log { source(src); source(chroots); filter(f_mailwarn); destination(mailwarn); };

# destination mailerr  { file("/var/log/mail.err"  suppress(30) fsync(yes)); };
# log { source(src); source(chroots); filter(f_mailerr);  destination(mailerr); };

# #
# # and also all in one file:
# #
# destination mail { file("/var/log/mail" suppress(30)); };
# log { source(src); source(chroots); filter(f_mail); destination(mail); };


# #
# # acpid messages in one file:
# #
# destination acpid { file("/var/log/acpid" suppress(30)); };
# destination devnull { };
# log { source(src); source(chroots); filter(f_acpid); destination(acpid); flags(final); };
# #
# # if you want more verbose acpid logging, comment the destination(null)
# # line and uncomment the destination(acpid) line
# #
# log { source(src); source(chroots); filter(f_acpid_full); destination(devnull); flags(final); };
# # log { source(src); source(chroots); filter(f_acpid_full); destination(acpid); flags(final); };
# #
# # old acpid < 1.0.6
# log { source(src); source(chroots); filter(f_acpid_old); destination(acpid); flags(final); };

# #
# # NetworkManager messages in one file:
# #
# destination netmgm { file("/var/log/NetworkManager" suppress(30)); };
# log { source(src); source(chroots); filter(f_netmgm); destination(netmgm); flags(final); };


# #
# # Cron-messages in one file:
# # (don't forget to provide logrotation config)
# #
# #destination cron { file("/var/log/cron" suppress(30)); };
# #log { source(src); source(chroots); filter(f_cron); destination(cron); };


# #
# # Some boot scripts use/require local[1-7]:
# #
# destination localmessages { file("/var/log/localmessages" suppress(30)); };
# log { source(src); source(chroots); filter(f_local); destination(localmessages); };


#
# All messages except iptables and the facilities news and mail:
#
destination messages { file("/var/log/messages" suppress(30) owner(-1) group(-1) perm(-1)); };
log { source(s_network); filter(f_messages); destination(messages); destination(d_loki);  };


#
# Firewall (iptables) messages in one file:
#
destination firewall { file("/var/log/firewall" suppress(30)); };
# destination firewall_loki { file("/var/log/firewall" suppress(30)); };
log { source(s_network); filter(f_iptables); destination(firewall); destination(d_loki); };


# source(s_network);
# #
# # Warnings (except iptables) in one file:
# #
# destination warn { file("/var/log/warn" suppress(30) fsync(yes)); };
# log { source(src); source(chroots); filter(f_warn); destination(warn); };
